#include <stdio.h>
#include <math.h>
#include <limits.h>

#define V 8

// Customizable Travelling salesman problem (solved using minimum distance travelled using C)

// Step 1: Update V above on line to actual size of your array

typedef struct {
    int x, y;
} City;

// Step 2: Update array below to co-ordinates of the points you are interested in
City cities[V] = {{0, 264}, {24, 246}, {24, 648}, {648, 428},  {48, 247}, {948,12}, {60,24}, {727,5} };

// Step 3: Update variables "s" and "e" below to indicate the start and end cities
int s = 0; // Starting point (City A)
int e = 7; // Ending point (City E)

double calculateDistance(City c1, City c2) {
    return sqrt(pow(c1.x - c2.x, 2) + pow(c1.y - c2.y, 2));
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int next_permutation(int* array, int n) {
    int i = n - 1;
    while (i > 0 && array[i - 1] >= array[i]) i--;
    if (i <= 0) return 0;

    int j = n - 1;
    while (array[j] <= array[i - 1]) j--;

    swap(&array[i - 1], &array[j]);
    j = n - 1;
    while (i < j) {
        swap(&array[i], &array[j]);
        i++;
        j--;
    }
    return 1;
}

double travellingSalesmanProblem(City* cities, int s, int e, int* path) {
    int vertex[V - 2];
    int k = 0;
    for (int i = 0; i < V; i++) {
        if (i != s && i != e) {
            vertex[k++] = i;
        }
    }

    double min_path = INFINITY;
    int min_path_order[V - 2];
    do {
        double current_pathweight = 0;
        int k = s;
        for (int i = 0; i < V - 2; i++) {
            current_pathweight += calculateDistance(cities[k], cities[vertex[i]]);
            k = vertex[i];
        }
        current_pathweight += calculateDistance(cities[k], cities[e]);
        if (current_pathweight < min_path) {
            min_path = current_pathweight;
            for (int i = 0; i < V - 2; i++) {
                min_path_order[i] = vertex[i];
            }
        }
    } while (next_permutation(vertex, V - 2));

    path[0] = s;
    for (int i = 0; i < V - 2; i++) {
        path[i + 1] = min_path_order[i];
    }
    path[V - 1] = e;

    return min_path;
}

void printPath(int* path, int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", path[i]);
    }
    printf("\n");
}

int main() {
    
    
    int path[V];

    double min_cost = travellingSalesmanProblem(cities, s, e, path);

    printf("Minimum cost to visit all cities: %.2f\n", min_cost);
    printf("Path: ");
    printPath(path, V);

    return 0;
}
